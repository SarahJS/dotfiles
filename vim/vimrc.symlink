" " " " " " " " " " " " " " " " "
" Cameron Little's .vimrc file  "
" " " " " " " " " " " " " " " " "

set nocompatible    " use Vim settings rather than Vi settings

set visualbell      " visual error alert
set t_vb=           " helps with errors
set mouse=a         " allow mouse use

set autoread        " auto read when a file is changed from the outside
set viminfo^=%      " remember info about open buffers on close
set lazyredraw      " Don't redraw while executing macros (better performance)

" go syntax highlighting
set rtp+=$GOROOT/misc/vim

filetype plugin indent on

" search "
set ignorecase      " ignore case
set smartcase       " unless capital characters are used
set incsearch       " find the next match as search is type
set hlsearch        " highlight results
set magic           " for regular expressions use magic (?)
" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
            \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
            \gvy/<C-R><C-R>=substitute(
            \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
            \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
            \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
            \gvy?<C-R><C-R>=substitute(
            \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
            \gV:call setreg('"', old_reg, old_regtype)<CR>
" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" visual stuff "
if &term =~ '256color'
    " Disable Background Color Erase (BCE) so that color schemes
    " work properly when Vim is used inside tmux and GNU screen.
    " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
    set t_ut=
endif
if &t_Co > 2 || has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
endif
syntax on           " turn on syntax highlighting
syntax enable

" Turns autocompletion on for various filetypes "
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType aspnet set omnifunc=xmlcomplete#CompleteTags
autocmd FileType aspx set omnifunc=xmlcomplete#CompleteTags

autocmd FileType wsgi set syntax=python
autocmd FileType python set sw=4
autocmd FileType python set ts=4
autocmd FileType python set sts=4
autocmd FileType sml set sw=2
autocmd FileType sml set ts=2
autocmd FileType sml set sts=2
autocmd FileType sig set syntax=sml
autocmd FileType sig set sw=2
autocmd FileType sig set ts=2
autocmd FileType sig set sts=2

autocmd BufNewFile,BufRead bash* setf sh " When editing stuff from bash vi-mode (Esc v), set proper syntax highlighting

set ruler           " always show current pos
set relativenumber  " display relative line numbers
set cmdheight=2     " more room for commands
set laststatus=2    " makes status bar 2 lines tall
" Format the status line
hi User1 ctermbg=white ctermfg=blue guibg=red guifg=green
set statusline=
function! GetCWD()
    let cwd = getcwd()
    let s = substitute(cwd, $HOME, "~", "")
    return s
endfunction
function! GetFile()
    let file = substitute(expand("%f"), $HOME, "~", "")
    return file
endfunction
set statusline+=\ %#todo#%{HasPaste()}%*%{PasteSpace()} " paste mode
set statusline+=%1*%{GetCWD()}      " current dir
set statusline+=/%*%{GetFile()}     " file
set statusline+=%m                  " modified?
set statusline+=\ %y                " type?
set statusline+=%#error#%r%*        " readonly?
set statusline+=%w                  " preview?
set statusline+=\ \{%n\}            " buffer num
set statusline+=%=                  " right align
set statusline+=%10((%l,%c%V)%)     " line and column
set statusline+=\ %P              " percent through file
set statusline+=\ %*                " ending space
" set statusline=[%n]\ %<%.99f\ %h%w%m%r%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%y%=%-16(\ %l,%c-%v\ %)%P
set showcmd         " show incomplete commands at bottom
set showmode        " show current mode at bottomi
set showmatch       " show matching brakets/parthesis
set cursorline
set virtualedit=onemore " allow for cursor beyond character
set wildmenu        " show list instead of just completing
set wildmode=list:longest,full " command <tab> completion, list matches, then longest common part, then all.
set background=dark
set title           " shows title of open file in terminal

" editing stuff "
set autoindent      " automatically indent
set smartindent
set smarttab
set nowrap          " don't wrap lines
set shiftwidth=4    " tab spacing
set tabstop=4       " tab spacing
set expandtab       " don't use tabs
:command! -nargs=1 -range Sretab <line1>,<line2>s/\v%(^ *)@<= {<args>}/\t/g

autocmd BufWritePre * :%s/\s\+$//e " remove trailing whitespace
set backspace=indent,eol,start  " allow backspace in insert mode
set scrolloff=5     " start scrolling when 5 lines away from margins
set sidescrolloff=10
set sidescroll=1
set encoding=utf8    " Set utf8 as standard encoding and en_US as the standard language
set ffs=unix,dos,mac " Use Unix as the standard file type
set history=1000     " more history storage
set undodir=~/.dotfiles/vim/undo
set undofile
set undolevels=1000
set undoreload=10000
set backupdir=~/.dotfiles/vim/tmp
set directory=~/.dotfiles/vim/tmp
inoremap <// </<C-x><C-o>
" Pressing <leader>ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" windows "
" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" copy paste stuff "
set pastetoggle=<f8>

" code folding "
set foldmethod=indent " fold based on indent
set foldnestmax=10  " deepest fold is 10 levels
set foldlevel=0

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Normal Mode Mappings "
" Makes J insert a <CR> it's like the opposite of J
nnoremap K i<C-m><Esc>
" Execute q macros with Q
nnoremap Q @q
" Y yanks to end of line, making it consistant with D and C
nnoremap Y y$
" Keep search pattern at the center of the screen
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
" Remap j and k to scroll by visual lines
nnoremap j gj
nnoremap k gk

" Insert Mode Mappings "
" A quicker alternative to pushing <ESC>
inoremap jk <ESC>
" Autoclosing parenthesis/brackets
inoremap ( ()<Left>
inoremap (<Right> (
inoremap (<BS> (<BS>
inoremap <expr> ) strpart(getline('.'), col('.')-1, 1) == ")" ? "\<Right>" : ")"
inoremap (<C-m> (<C-m><BS>)<Up><Esc>$i<Right><C-m>
inoremap { {}<Left>
inoremap {<Right> {
inoremap {<BS> {<BS>
inoremap <expr> } strpart(getline('.'), col('.')-1, 1) == "}" ? "\<Right>" : "}"
inoremap {<C-m> {<C-m><BS>}<Up><Esc>$i<Right><C-m>
inoremap [ []<Left>
inoremap [<Right> [
inoremap [<BS> [<BS>
inoremap <expr> ] strpart(getline('.'), col('.')-1, 1) == "]" ? "\<Right>" : "]"
inoremap [<C-m> [<C-m><BS>]<Up><Esc>$i<Right><C-m>
" set indenting in insert-mode
inoremap << <C-d>
inoremap >> <C-t>
" Go to beginning of line in insert mode
inoremap <C-a> <ESC>I

" Go to end of line in insert mode
inoremap <C-e> <ESC>A
" Start editing on new line above current line
inoremap <C-p> <ESC>O
" Start editing on new line below current line
inoremap <C-u> <ESC>o
" Move current line up one line (switches places with above line)
inoremap <silent><C-k> <ESC>mz:m-2<CR>`zi
" Move current line down one line (switches places with below line)
inoremap <silent><C-j> <ESC>mz:m+<CR>`zi

" Visual Mode Mappings "
" Yank highlighted text and searches it
vmap <C-n> y/<C-R>"<CR>
" visual shifting
vnoremap < <gv
vnoremap > >gv

" Command Mode Mappings "
" Leave escape mode by pressing jk/kj
cnoremap jk <ESC>
cnoremap kj <ESC>
" set sytnax to django template with html
command! Sdh :setfiletype htmldjango
command! Shd :setfiletype htmldjango

set dictionary=/usr/share/dict/words

" .vimrc references "
" https://github.com/edlandm/vim
" http://vimdoc.sourceforge.net/htmldoc/intro.html#keycodes

" Returns paste mode text
function! HasPaste()
    if &paste
        return 'P'
    en
    return ''
endfunction
function! PasteSpace()
    if &paste
        return " "
    en
    return ''
endfunction

" Server specific stuff
if hostname() == "nari"
    let patharr = split(expand("%:p"), "/")
    if len(patharr) > 3 && patharr[2] == "django"
        autocmd BufWritePre *.py :! touch ~/django/wwu_housing/wsgi.py
    endif

    inoremap Higgenson Higginson
    inoremap higgenson higginson
endif

autocmd FileType diff set nofoldenable " prevent folding on diffs
